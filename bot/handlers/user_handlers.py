from aiogram import Router, F
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery

from bot.database.database import complete_add_task, add_user, count_user_tasks, get_all_user_tasks, get_task_info, \
    set_is_done, get_is_done, delete_task
from bot.keyboards.user_keyboards import keyboard_category, menu_keyboard, start_keyboard, my_task_keyboard, \
    task_keyboard, back_to_menu, back_task_menu, back_to_my_tasks
from bot.states.user_states import User

user_router = Router()

@user_router.message(CommandStart())
async def cmd_start(message: Message):
    await add_user(message.from_user.id, message.from_user.full_name, message.from_user.username)
    await message.answer('–ü—Ä–∏–≤–µ—Ç! –Ø - —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏. '
                         '–Ø –ø–æ–º–æ–≥—É —Å–æ–∑–¥–∞–≤–∞—Ç—å, –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ –≤–∞–∂–Ω—ã—Ö –¥–µ–ª–∞—Ö!\n\n'
                         '–ù–µ –∑–Ω–∞–µ—à—å, —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å? –ù–∞–ø–∏—à–∏ /help ‚Äî '
                         '—è —Ä–∞—Å—Å–∫–∞–∂—É –æ –≤—Å–µ—Ö –º–æ–∏—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö –∏ –∫–æ–º–∞–Ω–¥–∞—Ö!', reply_markup=start_keyboard())

@user_router.message(Command('help'))
async def cmd_help(message: Message):
    await message.answer('<b>üìö –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É-—Ç—Ä–µ–∫–µ—Ä—É –∑–∞–¥–∞—á</b>\n\n'
                         '<b>üìå –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:</b>\n'
                         '‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π\n'
                         '‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∑–∞–¥–∞—á\n'
                         '‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (‚úÖ/‚ùå)\n'
                         '‚Ä¢ –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á\n\n'
                         '<b>‚öôÔ∏è –ö–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∑–∞–¥–∞—á–∞–º–∏:</b>\n'
                         '1. –°–æ–∑–¥–∞–π—Ç–µ –∑–∞–¥–∞—á—É —á–µ—Ä–µ–∑ –º–µ–Ω—é\n'
                         '2. –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ —Å–ø–∏—Å–æ–∫ —á–µ—Ä–µ–∑ –º–µ–Ω—é –∑–∞–¥–∞—á\n'
                         '3. –ù–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –∑–∞–¥–∞—á—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:\n'
                         '   - –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è\n'
                         '   - –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É\n'
                         '   - –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É\n'
                         '–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ', parse_mode="HTML", reply_markup=start_keyboard())

@user_router.callback_query(F.data == 'add_task_kb')
async def add_task(call: CallbackQuery, state: FSMContext):
    await state.set_state(User.task)
    await call.message.edit_text("üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏</b>\n"
                                "‚îî –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, –Ω–∞–ø—Ä–∏–º–µ—Ä: <i>–ö—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ</i>",
                                parse_mode="HTML", reply_markup=back_to_menu())

@user_router.message(User.task)
async def add_category(message: Message, state: FSMContext):
    await state.update_data(task=message.text)
    await message.answer('<b>–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫ –∑–∞–¥–∞—á–µ?</b>', reply_markup=keyboard_category(), parse_mode="HTML")

@user_router.callback_query(F.data.in_(['yes_category', 'no_category']))
async def set_category(call: CallbackQuery, state: FSMContext):
    if call.data == 'yes_category':
        await state.set_state(User.category)
        await call.message.edit_text('<b>–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:</b>\n'
                                     '‚Ä¢ 1-2 —Å–ª–æ–≤–∞\n'
                                     '‚Ä¢ –ù–∞–ø—Ä–∏–º–µ—Ä:\n'
                                     ' - <i>üõí –ü–æ–∫—É–ø–∫–∏</i>\n'
                                     ' - <i>üíº –†–∞–±–æ—Ç–∞</i>', parse_mode="HTML")
    else:
        data = await state.get_data()
        try:
            await complete_add_task(
                user_id=call.from_user.id,
                task=data['task'],
            )
            await call.message.edit_text('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!', reply_markup=back_to_menu())
        except:
            await call.message.edit_text(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏', reply_markup=back_to_menu())
        finally:
            await state.clear()


@user_router.message(User.category)
async def complete_add(message: Message, state: FSMContext):
    await state.update_data(category=message.text)
    data = await state.get_data()
    try:
        await complete_add_task(
            user_id=message.from_user.id,
            task=data['task'],
            category=data['category']
        )
        await message.answer('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!', reply_markup=back_to_menu())
    except:
        await message.answer(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏', reply_markup=back_to_menu())
    finally:
        await state.clear()


@user_router.callback_query(F.data == 'menu_kb')
async def user_menu(call: CallbackQuery, state: FSMContext):
    if call.data == 'menu_kb':
        await state.clear()
    await call.message.edit_text('üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>', reply_markup=menu_keyboard(), parse_mode="HTML")

@user_router.callback_query(F.data == 'profile')
async def profile(call: CallbackQuery):
    await call.message.edit_text(f'–ü—Ä–æ—Ñ–∏–ª—å:\n\n'
                                 f'üë§<b>–í–∞—à–µ –∏–º—è:</b> {call.from_user.full_name}\n'
                                 f'üìä<b>–ó–∞–¥–∞—á:</b> {await count_user_tasks(call.from_user.id)}',
                                 reply_markup=back_to_menu(), parse_mode="HTML")

@user_router.callback_query(F.data == 'my_tasks')
async def my_tasks(call: CallbackQuery):
    tasks = await get_all_user_tasks(call.from_user.id)
    await call.message.edit_text('–í–∞—à–∏ –∑–∞–¥–∞—á–∏:', reply_markup=my_task_keyboard(tasks))

@user_router.callback_query(F.data.startswith("task_"))
async def task_info(call: CallbackQuery):
    task_id = call.data.split("_")[1]
    task = await get_task_info(task_id)
    task_text, category, is_done = task
    is_done = await get_is_done(task_id)
    message = (f'ID –∑–∞–¥–∞—á–∏ #{task_id}\n\n'
               f'–¢–µ–∫—Å—Ç: {task_text}\n'
               f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category if category else "–±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"}\n'
               f'–°—Ç–∞—Ç—É—Å: {'‚úÖ–í—ã–ø–æ–ª–Ω–µ–Ω–∞' if (is_done == 1) else '‚ùå–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞'}')
    await call.message.edit_text(message, reply_markup=task_keyboard(task_id))

@user_router.callback_query(F.data.startswith("set_done_"))
async def set_done(call: CallbackQuery):
    task_id = call.data.split("_")[2]
    if await get_is_done(task_id) == 0:
        await set_is_done(1, task_id)
        await call.message.edit_text('–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–º–µ–Ω—è–ª–∏ —Å—Ç–∞—Ç—É—Å:\n‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ',
                                     reply_markup=back_task_menu(task_id))
    else:
        await set_is_done(0, task_id)
        await call.message.edit_text('–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–º–µ–Ω—è–ª–∏ —Å—Ç–∞—Ç—É—Å:\n‚ùå –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ',
                                     reply_markup=back_task_menu(task_id))

@user_router.callback_query(F.data.startswith("delete_task_"))
async def del_task(call: CallbackQuery):
    task_id = call.data.split("_")[2]
    await delete_task(task_id)
    await call.message.edit_text('–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞', reply_markup=back_to_my_tasks())